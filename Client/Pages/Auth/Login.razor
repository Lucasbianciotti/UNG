@page "/login"
@inject IAuthentication_Services _AuthenticationService
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject NavigationManager _NavigationManager
@inject IToast_Services _Toast
@layout EmptyLayout


<main class="main-content  mt-0">
    <section>
        <div class="page-header min-vh-75">
            <div class="container">
                <div class="row">
                    <div class="col-xl-4 col-lg-5 col-md-6 d-flex flex-column mx-auto">
                        <div class="card card-plain mt-6">
                            <div class="card-header pb-0 text-left bg-transparent">
                                <img class="img-fluid" src="/img/logo.png" />
                                <h3 class="font-weight-bolder text-info text-gradient">Welcome back</h3>
                                <p class="mb-0">Enter your email and password to sign in</p>
                            </div>
                            <div class="card-body">
                                <EditForm Model="_userForAuthentication"
                                          OnValidSubmit="Execute"
                                          OnInvalidSubmit="(() => StateHasChanged())"
                                          role="form">

                                    <DataAnnotationsValidator />


                                    <label>Email</label>
                                    <div class="mb-3">
                                        <InputText id="email"
                                                   class="form-control"
                                                   placeholder="Email"
                                                   aria-label="Email"
                                                   aria-describedby="email-addon"
                                                   @bind-Value="_userForAuthentication.Email" />
                                        <ValidationMessage For="@(() => _userForAuthentication.Email)" />

                                    </div>

                                    <label>Password</label>
                                    <div class="mb-3">
                                        <InputText type="password"
                                                   id="password"
                                                   class="form-control"
                                                   aria-label="Password"
                                                   aria-describedby="password-addon"
                                                   placeholder="Password"
                                                   @bind-Value="_userForAuthentication.Password" />
                                        <ValidationMessage For="@(() => _userForAuthentication.Password)" />

                                    </div>

                                    <div class="d-flex-center">

                                        @if (_Loading)
                                        {
                                            <_LoadingButton />
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn bg-gradient-info w-100 mt-4 mb-0">SIGN IN</button>
                                        }
                                    </div>

                                </EditForm>

                            </div>
                            @*<div class="card-footer text-center pt-0 px-lg-2 px-1">
                            <p class="mb-4 text-sm mx-auto">
                            Don't have an account?
                            <a @onclick="(() => ToSignup())" style="cursor:pointer;" class="text-info text-gradient font-weight-bold">Sign up</a>
                            </p>
                            </div>*@
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="oblique position-absolute top-0 h-100 d-md-block d-none me-n8">
                            <div class="oblique-image bg-cover position-absolute fixed-top ms-auto h-100 z-index-0 ms-n6"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<footer class="footer py-5">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 mx-auto text-center mb-4 mt-2">
                <a href="https://www.facebook.com/ungsystems" target="_blank" class="text-secondary mr-2">
                    <span class="text-lg fab fa-facebook" aria-hidden="true"></span>
                </a>
                <a href="https://www.instagram.com/ungsystems/" target="_blank" class="text-secondary mr-2">
                    <span class="text-lg fab fa-instagram" aria-hidden="true"></span>
                </a>
                @if (_ShowConfiguration)
                {
                    <a @onclick="(()=>RedirecToConfiguration())" class="text-secondary">
                        <span class="text-lg fa fa-cogs" aria-hidden="true"></span>
                    </a>
                }
            </div>
        </div>
        <div class="row">
            <div class="col mx-auto text-center mt-1">
                <p class="mb-0 text-secondary">
                    Copyright ©@DateTime.Now.Year UNG system.
                </p>
            </div>
        </div>
    </div>
</footer>


@code {

    private bool _Loading { get; set; }
    private bool _ShowConfiguration { get; set; } = false;

    private Login_Request _userForAuthentication = new Login_Request();


    private async Task Execute()
    {

        try
        {
            _Loading = true;
            StateHasChanged();

            var result = await _AuthenticationService.Login(_userForAuthentication, _Toast);
            if (string.IsNullOrEmpty(result))
            {
                _NavigationManager.NavigateTo("/");
            }
            else
            {
                _ShowConfiguration = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _GlobalConfiguration.NuevoLog("Could not login", SystemActionsEnum.Login, e, SystemErrorCodesEnum.Error);
        }
        finally
        {
            _Loading = false;
            StateHasChanged();
        }
    }

    public void RedirecToConfiguration()
    {
        _NavigationManager.NavigateTo("/apiconfig");
    }

    public void RedirecToRemove()
    {
        _NavigationManager.NavigateTo("/remove");
    }

    public void ToSignup()
    {
        _NavigationManager.NavigateTo("/signup");
    }
}
