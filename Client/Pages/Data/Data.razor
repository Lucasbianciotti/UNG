@page "/data"

@using CommonModels.Request
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection _HubConnection

@inject HttpClient Http
@inject ILocalStorage_Services _LocalStorage
@inject IURLs_Services _URLs
@inject IGlobalElements_Services _GlobalElements
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject IToast_Services _Toast
@inject IJSRuntime _JS

@attribute [Authorize]

<Title Value="@_Title"></Title>


<SfDialog IsModal="false" CloseOnEscape="false"
          Target="#content-body"
          CssClass="dialog-max-content"
          @bind-Visible="@PrincipalCard_IsVisible">

    <DialogTemplates>
        <Content>

            @{
                string transparent = (_ExpandFilters) ? "" : "transparent";
            }


            <div class="mb-4 @transparent">
                <SfCard>
                    <div class="card-header card-header-min justify-content-between d-flex-center">

                        <h6><i class="fa-solid fa-filter mr-1"></i>Filters</h6>

                        <div class="p-0 d-flex-center">

                            <button @onclick="(() => Filters_LastWeek())" class="btn btn-rounded btn-rounded-text btn-outline-info mr-1" type="button" title="Last week">
                                <i class="fa-solid fa-calendar-week mr-1"></i> Last week
                            </button>

                            <button @onclick="(() => Filters_Today())" class="btn btn-rounded btn-rounded-text btn-outline-info mr-1" type="button" title="Today">
                                <i class="fa-solid fa-calendar-day mr-1"></i> Today
                            </button>

                            @if (_ExpandFilters)
                            {
                                <button @onclick="(() => {_ExpandFilters=false; StateHasChanged();  })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Close">
                                    <i class="fa-solid fa-angles-up"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="(() => {_ExpandFilters=true; StateHasChanged();  })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Expand">
                                    <i class="fa-solid fa-angles-down"></i>
                                </button>
                            }
                        </div>

                    </div>

                    @{
                        string _StyleFilters = (_ExpandFilters) ? "display:block" : "display:none !important";
                    }

                    <div class="pb-3" style="@_StyleFilters">
                        <CardContent>

                            <EditForm Model="@_Filters" OnInvalidSubmit="(() => StateHasChanged())" OnValidSubmit="(()=> Filter())">
                                <DataAnnotationsValidator />

                                <div class="row">

                                    <div class="col row">
                                        <div class="col-auto">
                                            <label>From</label>
                                            <div class="mt-2 mb-2">
                                                <SfDatePicker @bind-Value="@_Filters.Date_Start"
                                                              Format="dd/MM/yyyy"
                                                              AllowEdit="true"
                                                              TValue="DateTime"
                                                              Max="@_Filters.Date_End"
                                                              ShowClearButton="false"
                                                              Placeholder="From" />
                                            </div>
                                        </div>

                                        <div class="col-auto">
                                            <label>To</label>
                                            <div class="mt-2 mb-2">
                                                <SfDatePicker @bind-Value="@_Filters.Date_End"
                                                              Format="dd/MM/yyyy"
                                                              AllowEdit="true"
                                                              TValue="DateTime"
                                                              Min="@_Filters.Date_Start"
                                                              Max="@DateTime.Now"
                                                              ShowClearButton="false"
                                                              Placeholder="To" />
                                            </div>
                                        </div>

                                        <div class="col">
                                            <label>State</label>
                                            <div class="mb-2">
                                                <SfChip Selection="Syncfusion.Blazor.Buttons.SelectionType.Multiple" SelectedChips="@_ChipFilters">
                                                    <ChipEvents OnClick="@OnClickChipFilter" />
                                                    <ChipItems>
                                                        <ChipItem Text="@DataStatusEnum.Sended" />
                                                        <ChipItem Text="@DataStatusEnum.NotSended" />
                                                    </ChipItems>
                                                </SfChip>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-auto d-flex-center px-5">
                                        @if (_Loading)
                                        {
                                            <_LoadingButton />
                                        }
                                        else
                                        {
                                            <button @onclick="(()=>ResetFilter())" class="btn btn-rounded btn-outline-default mr-1" type="button" title="Reset filters">
                                                <i class="fa-solid fa-rotate-right"></i>
                                            </button>

                                            <button class="btn btn-rounded btn-rounded-text btn-outline-info" type="submit" title="Filter">
                                                <i class="fa-solid fa-filter mr-1"></i> Filter
                                            </button>
                                        }
                                    </div>

                                </div>

                            </EditForm>

                        </CardContent>
                    </div>

                </SfCard>
            </div>



            <div class="mb-4">
                <SfCard>

                    <div class="card-header justify-content-between d-flex-center">

                        <h6><i class="fa-solid fa-database mr-1"></i>@_Title</h6>

                        <div class="p-0 d-flex-center">
                            @if (_AutoupdateData)
                            {
                                <SfSwitch CssClass="btn btn-rounded btn-outline-info btn-switch mr-1"
                                      title="Autoupdate enabled"
                                      @bind-Checked="@_AutoupdateData" />
                            }
                            else
                            {
                                <SfSwitch CssClass="btn btn-rounded btn-outline-info btn-switch mr-1"
                                      title="Autoupdate disabled"
                                      @bind-Checked="@_AutoupdateData" />
                            }

                            <button @onclick="(async () => await LoadInformation())" class="btn btn-rounded btn-rounded-min btn-outline-info mr-1" type="button" title="Reload information">
                                <i class="fas fa-redo-alt"></i>
                            </button>

                            @if (_ExpandTable)
                            {
                                <button @onclick="(() => {_ExpandTable=false; StateHasChanged();  })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Close">
                                    <i class="fa-solid fa-angles-up"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="(() => {_ExpandTable=true; StateHasChanged();  })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Expand">
                                    <i class="fa-solid fa-angles-down"></i>
                                </button>
                            }
                        </div>

                    </div>


                    @{
                        string _StyleTable = (_ExpandTable) ? "display:block" : "display:none !important";
                    }

                    <div class="pb-3" style="@_StyleTable">
                        <CardContent>

                            @if (_Loading)
                            {
                                <div class="mt-3">
                                    <_Loading />
                                </div>
                            }
                            else
                            {
                                if (_GlobalElements.PermissionForSection.Read)
                                {
                                    if (_Ready)
                                    {
                                        if (_GlobalElements.ListOfData == null || _GlobalElements.ListOfData.Count == 0)
                                        {
                                            <_FailedToLoad _Message="This is empty." />

                                        }
                                        else
                                        {
                                            <SfGrid DataSource="@_GlobalElements.ListOfData"
                                    Toolbar="@(new List<string>() { "ExcelExport","Search"})"
                                    AllowExcelExport="true"
                                    AllowPdfExport="false"
                                    ShowColumnChooser="true"
                                    AllowResizing="true"
                                    AllowSorting="true"
                                    AllowPaging="true"
                                    AllowReordering="false"
                                    Width="100%"
                                    Height="100%" @ref="_Grid">

                                                <GridPageSettings PageCount="5" PageSizes="true" />

                                                <GridEvents ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" OnToolbarClick="ToolbarClick" TValue="Data_Request" />

                                                <GridColumns>

                                                    <GridColumn Field=@nameof(Data_Request.ID)
                                                HeaderText="ID"
                                                Visible="false"
                                                TextAlign="TextAlign.Center"
                                                IsPrimaryKey="true" />

                                                    <GridColumn Field=@nameof(Data_Request.Datetime)
                                                HeaderText="Date"
                                                Format="d"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true">
                                                        <Template>
                                                            @{
                                                                var item = (context as Data_Request);
                                                                string date = item.Datetime.ToString("dd/MM/yyyy");
                                                                string time = item.Datetime.ToString("HH:mm:ss") + "hs";
                                                <span><strong>@date</strong>    @time</span>
                                            }
                                        </Template>
                                    </GridColumn>

                                    <GridColumn HeaderText="Type"
                                                AutoFit="true"
                                                TextAlign="TextAlign.Center">
                                        <Template>
                                            @{
                                                                var data = (context as Data_Request);

                                                                if (data.Equipment_Type == EquipmentsTypesEnum.Drone)
                                                                {
                                                    <div class="icon-table" title="@EquipmentsTypesEnum.GetType(data.Equipment_Type)">
                                                        <i>
                                                            <_SVG_DroneBlack />
                                                        </i>
                                                    </div>
                                                                }

                                                                else if (data.Equipment_Type == EquipmentsTypesEnum.HandHel)
                                                                {
                                                    <div class="icon-table" title="@EquipmentsTypesEnum.GetType(data.Equipment_Type)">
                                                        <i>
                                                            <_SVG_Handheld />
                                                        </i>
                                                    </div>
                                                                }

                                                                else if (data.Equipment_Type == EquipmentsTypesEnum.Notebook)
                                                                {
                                                    <div class="icon-table" title="@EquipmentsTypesEnum.GetType(data.Equipment_Type)">
                                                        <i>
                                                            <_SVG_Notebook />
                                                        </i>
                                                    </div>
                                                                }

                                                                else if (data.Equipment_Type == EquipmentsTypesEnum.Tablet)
                                                                {
                                                    <div class="icon-table" title="@EquipmentsTypesEnum.GetType(data.Equipment_Type)">
                                                        <i>
                                                            <_SVG_Tablet />
                                                        </i>
                                                    </div>
                                                                }
                                            }
                                        </Template>
                                    </GridColumn>

                                    <GridColumn Field=@nameof(Data_Request.Equipment_Name)
                                                HeaderText="Equipment"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true" />

                                    <GridColumn Field=@nameof(Data_Request.Info)
                                                HeaderTextAlign="TextAlign.Center"
                                                HeaderText="Data"
                                                AutoFit="true"
                                                TextAlign="TextAlign.Left" />


                                    <GridColumn Field=@nameof(Data_Request.Ubication)
                                                HeaderText="Ubication"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true">
                                        <Template>
                                            @{
                                                                var data = (context as Data_Request);

                                                <div @onclick="(()=>OpenMap(data))" class="d-flex-center" title="Lat: @data.Lat Long: @data.Lon">
                                                    <span>@data.Ubication</span>
                                                    <button class="btn btn-rounded btn-rounded-min btn-outline-info ml-1" title="Open map">
                                                        <i class="fa-solid fa-map-location-dot"></i>
                                                    </button>
                                                </div>

                                            }
                                        </Template>
                                    </GridColumn>

                                    <GridColumn Field=@nameof(Data_Request.Altitude)
                                                HeaderText="Altitude"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true">
                                        <Template>
                                            @{
                                                                var item = (context as Data_Request);
                                                <span>@item.Altitude cm</span>
                                            }
                                        </Template>
                                    </GridColumn>

                                    <GridColumn Field=@nameof(Data_Request.Count)
                                                HeaderText="Count"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true" />

                                    <GridColumn Field=@nameof(Data_Request.Sended)
                                                HeaderText="State"
                                                TextAlign="TextAlign.Center"
                                                AutoFit="true">
                                        <Template>
                                            @{
                                                                var data = (context as Data_Request);

                                                <div class="d-flex-center">
                                                    @if (data.Sended)
                                                                    {
                                                        <div class="badge badge-pill badge-success">
                                                            <span>@DataStatusEnum.Sended</span>
                                                        </div>
                                                                    }
                                                                    else
                                                                    {
                                                        <div class="badge badge-pill badge-danger">
                                                            <span>@DataStatusEnum.NotSended</span>
                                                        </div>
                                                                    }
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>

                                </GridColumns>

                                <GridTemplates>

                                    <EmptyRecordTemplate>
                                        <_FailedToLoad _Message="Not found data." />
                                    </EmptyRecordTemplate>

                                    @*<DetailTemplate>
                                    //    @{
                                    //        var model = (context as Station_Request);
                                    //    }

                                    //    <div class="col-10 card p-1 mt-1 mb-1 border-shadow">
                                    //        <div class="card-content">
                                    //        </div>
                                    //    </div>
                                    //</DetailTemplate>
                                    // *@

                                </GridTemplates>

                            </SfGrid>
                                        }
                                    }
                                    else
                                    {
                                        <_FailedToLoad />
                                    }
                                }
                                else
                                {
                                    <_WithoutPermission />
                                }
                            }

                        </CardContent>
                    </div>

                </SfCard>
            </div>



            <div class="mb-4">
                <SfCard>

                    <div class="card-header card-header-min justify-content-between d-flex-center">

                        <h6 class="col-auto"><i class="fa-solid fa-list mr-1"></i> List of points</h6>

                        <div class="p-0 d-flex-center">

                            <button @onclick="(async () => await UpdatePoints())" class="btn btn-rounded btn-rounded-min btn-outline-info mr-1" type="button" title="Reload map">
                                <i class="fas fa-redo-alt"></i>
                            </button>

                            @if (_ExpandMap)
                            {
                                <button @onclick="(() => {_ExpandMap = false; StateHasChanged();  })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Close">
                                    <i class="fa-solid fa-angles-up"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="(async() => {_ExpandMap = true; StateHasChanged(); await UpdatePoints(); })" class="btn btn-rounded btn-rounded-min btn-outline-info" type="button" title="Expand">
                                    <i class="fa-solid fa-angles-down"></i>
                                </button>
                            }
                        </div>

                    </div>


                    @{
                        string _StyleMap = (_ExpandMap) ? "" : "display:none !important";
                    }
                    <div class="pb-2 row" style="@_StyleMap">
                        <div class="col-lg-8 col-md-8 col-sm-8">

                            <div class="m-2 border" id="listMap"></div>

                        </div>

                        <div id="markerDetail" class="col-lg-4 col-md-4 col-sm-4 d-flex flex-column justify-content-center align-items-start">
                        </div>

                    </div>
                </SfCard>
            </div>

        </Content>
    </DialogTemplates>

    <DialogAnimationSettings Effect="@_GlobalConfiguration.AnimationEffect" Duration=@_GlobalConfiguration.AnimationTime />
    <DialogPositionData X="center" Y="start"></DialogPositionData>
</SfDialog>



<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="icon-table text-center">
                    <h6>
                        <i class="fa-solid fa-timer"></i>
                        @_ModalData.Info - @_ModalData.Datetime.ToShortDateString() - @_ModalData.Datetime.ToLongTimeString() hs
                    </h6>
                </div>

            </div>
            <div class="modal-body">

                <div class="d-flex-center pb-3" id="div-modalmap">
                    <div id="modalmap"></div>
                </div>

                <div class="d-flex-center">

                    <div class="row">
                        <button @onclick="CloseModal" class="btn btn-rounded btn-outline-default" type="button" title="Close">
                            <i class="fa-solid fa-arrow-left"></i>
                        </button>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}



@code {
    #region Variables
    private NumberFormatInfo nfi = new NumberFormatInfo { NumberDecimalSeparator = ",", NumberGroupSeparator = "." };

    private bool _AutoupdateData { get; set; } = true;

    private bool _ExpandFilters { get; set; } = false;
    private bool _ExpandTable { get; set; } = true;
    private bool _ExpandMap { get; set; } = true;
    private bool _AppliedFilters { get; set; } = false;

    private bool _Loading { get; set; } = true;
    private bool _Ready { get; set; } = true;
    private string _Title { get; set; } = "Data";
    private string _SRCmap { get; set; }

    private int _ZoomMap { get; set; } = 20;

    private string[] _ChipFilters = new string[1];
    private FilterData_Request _Filters = new();
    private SfGrid<Data_Request> _Grid = new();


    private Data_Request _ModalData = new();
    #endregion


    private async Task Filters_LastWeek()
    {
        _Filters.Date_Start = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0) - TimeSpan.FromDays(7);
        _Filters.Date_End = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59);

        await LoadInformation();
    }

    private async Task Filters_Today()
    {
        _Filters.Date_Start = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
        _Filters.Date_End = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59);

        await LoadInformation();
    }

    //private async Task ValueChangeHandler(ChangeEventArgs<string, xEditableItem> args)
    //{
    //    switch (args.Value)
    //    {
    //        case "1":
    //            _Filters.Date_Start = DateTime.Now;
    //            _Filters.Date_End = DateTime.Now;
    //            break;
    //        case "2":
    //            _Filters.Date_Start = DateTime.Now - new TimeSpan(7, 0, 0, 0);
    //            _Filters.Date_End = DateTime.Now;
    //            break;
    //        case "3":
    //            _Filters.Date_Start = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    //            _Filters.Date_End = DateTime.Now;
    //            break;
    //        default:
    //            break;
    //    }

    //    await LoadInformation();
    //}




    #region Mostrar informacion

    protected override async Task OnInitializedAsync()
    {
        PrincipalCard_IsVisible = true;

        _GlobalElements.PermissionForSection = await _LocalStorage.GetPermissionForSection(SystemSectionsEnum.Data);

        if (!_GlobalElements.PermissionForSection.Read) StateHasChanged();



        await LoadInformation();


        if (_GlobalElements.Station.Map.File_Content == null)
            _Toast.ShowError("Map not found.");
        else
        {
            _SRCmap = $"data:{_GlobalElements.Station.Map.File_ContentType};base64,{Convert.ToBase64String(_GlobalElements.Station.Map.File_Content)}";
            await _JS.InvokeAsync<int>("CreateListMap", _GlobalElements.Station.Map, _ZoomMap, _SRCmap);
        }

        try
        {
            _HubConnection = new HubConnectionBuilder()
              .WithUrl(await _URLs.ReportSignal())
              .WithAutomaticReconnect()
              .AddNewtonsoftJsonProtocol(opts => opts.PayloadSerializerSettings.TypeNameHandling = TypeNameHandling.Auto)
              .Build();


            if (string.IsNullOrEmpty(_HubConnection.ConnectionId)) await StartHub();
        }
        catch (Exception e)
        {
            _Toast.ShowError("The SignalR URL's is invalid.");
        }
    }


    private async Task StartHub()
    {
        _HubConnection.On("DataReceived", async (object data) =>
          {
              if (_AutoupdateData)
              {
                  try
                  {
                      var _data = JsonConvert.DeserializeObject<Data_Request>(data.ToString());

                      if (_AppliedFilters)//si corresponde a los filtros, se muestra
                      {

                          if (_data != null && (_data.Datetime >= _Filters.Date_Start && _data.Datetime < _Filters.Date_End) || (_data.Datetime > _Filters.Date_Start && _data.Datetime <= _Filters.Date_End))
                          {
                              if (_Filters.Sended != null && _data.Sended == _Filters.Sended)
                              {
                                  if (_Filters.IDequipment != null && _Filters.IDequipment.Count != 0 && _Filters.IDequipment.Any(z => z == _data.IDequipment))
                                  {
                                      _GlobalElements.ListOfData.Add(_data);

                                      await UpdateView();
                                  }
                              }
                          }
                      }
                  }
                  catch (Exception ex)
                  {

                  }
              }
          });

        await _HubConnection.StartAsync();
    }


    private async Task LoadInformation()
    {
        try
        {
            _Ready = false;
            _Loading = true;
            StateHasChanged();

            await _JS.InvokeAsync<int>("clearMarkers");

            var statusResponse = await HttpClass.GetData(Http, await _URLs.Data(), _Toast, _GlobalElements, _Filters);
            if (statusResponse)
            {
                _Ready = true;
                await UpdateView();
            }
        }
        catch (Exception e)
        {
            _GlobalConfiguration.NuevoLog("The information could not be loaded.", SystemActionsEnum.LoadInformation, e, SystemErrorCodesEnum.Error);
        }
        finally
        {
            _Loading = false;
            StateHasChanged();
        }
    }


    private async Task UpdateView()
    {
        try
        {
            if (_GlobalElements.ListOfData != null && _GlobalElements.ListOfData.Count != 0)
            {
                _GlobalElements.ListOfData = _GlobalElements.ListOfData.OrderByDescending(x => x.Datetime).ToList();

                StateHasChanged();

                await UpdatePoints();

                _Grid.clear
                await _Grid.Refresh();
            }
        }
        catch (Exception e)
        {

        }
    }

    public async Task UpdatePoints()
    {
        try
        {
            if (_GlobalElements.Station.Map.File_Content != null)
            {
                await _JS.InvokeAsync<int>("UpdatePoints", _GlobalElements.ListOfData);
            }
            else
            {
                _Toast.ShowError("Map not found.");
            }

        }
        catch (Exception e)
        {

        }
    }

    #endregion


    #region Filters

    private async Task Filter()
    {
        _AppliedFilters = true;
        await LoadInformation();
    }

    private async Task ResetFilter()
    {
        _AppliedFilters = false;
        _Filters = new FilterData_Request();
        await LoadInformation();
        //_ExpandFilters = false;
    }

    private void OnClickChipFilter(Syncfusion.Blazor.Buttons.ChipEventArgs args)
    {
        if (args.Value == DataStatusEnum.Sended && args.Selected)
        {
            _Filters.Sended = true;
            _ChipFilters = new string[1] { DataStatusEnum.Sended };
        }
        if (args.Value == DataStatusEnum.Sended && !args.Selected)
        {
            _Filters.Sended = true;
            _ChipFilters = new string[] { };
        }
        else if (args.Value == DataStatusEnum.NotSended && args.Selected)
        {
            _Filters.Sended = false;
            _ChipFilters = new string[1] { DataStatusEnum.NotSended };
        }
        else if (args.Value == DataStatusEnum.NotSended && !args.Selected)
        {
            _Filters.Sended = false;
            _ChipFilters = new string[] { };
        }

        if (_ChipFilters.Length == 0)
            _Filters.Sended = null;
    }
    #endregion


    #region Grilla

    private async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (_GlobalElements.PermissionForSection.Export)
        {
            if (args.Item.Id.Contains("excelexport"))
            {
                //this._Grid.ExcelExport();
                ExcelExportProperties exportProperties = new ExcelExportProperties();
                exportProperties.IncludeTemplateColumn = true;
                await _Grid.ExcelExport(exportProperties);

            }
        }
        else
        {
            _Toast.ShowWarning("No tiene permiso para exportar.");
        }
    }

    private void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<Data_Request> args)
    {
        try
        {
            if (args.Column.HeaderText == "Date")
            {
                string date = args.Data.Datetime.ToString("dd/MM/yyyy");
                string time = args.Data.Datetime.ToString("HH:mm") + "hs";
                args.Cell.Value = date + " " + time;
            }
            if (args.Column.HeaderText == "Type")
            {
                args.Cell.Value = EquipmentsTypesEnum.GetType(args.Data.Equipment_Type);
            }
            if (args.Column.HeaderText == "State")
            {
                if (args.Data.Sended)
                    args.Cell.Value = DataStatusEnum.Sended;
                else
                    args.Cell.Value = DataStatusEnum.NotSended;
            }
        }
        catch (Exception e)
        {

        }
    }

    #endregion Grilla


    #region Modales y ventanas

    private bool PrincipalCard_IsVisible { get; set; } = true;

    public void MostrarVentana_Principal()
    {
        PrincipalCard_IsVisible = true;
        StateHasChanged();
    }

    #endregion


    #region Abrir Cerrar Modal
    private bool _Modal_IsVisible { get; set; } = false;

    public async Task OpenMap(Data_Request data)
    {
        if (_GlobalElements.Station.Map.File_Content != null)
        {
            ModalDisplay = "block;";
            ModalClass = "Show scale-in-center";
            ShowBackdrop = true;
            _ModalData = data;
            _Modal_IsVisible = true;
            StateHasChanged();

            //await _JS.InvokeAsync<int>("CreateModalMap", _GlobalElements.Station.Map, _ZoomMap, _SRCmap);

            await _JS.InvokeAsync<int>("OpenModalMap", _GlobalElements.Station.Map, _ZoomMap, _SRCmap, data);
        }
        else
        {
            _Toast.ShowError("Map not found.");
        }
    }

    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    public void CloseModal()
    {
        ModalClass = "slit-out-vertical";
        StateHasChanged();
        ShowBackdrop = false;
        ModalDisplay = "none";
        StateHasChanged();
    }
    #endregion


}
