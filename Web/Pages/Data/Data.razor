@page "/data"

@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection _HubConnection

@inject HttpClient Http
@inject ILocalStorage_Services _LocalStorage
@inject IGlobalElements_Services _GlobalElements
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject IToast_Services _Toast

@attribute [Authorize]

<Title Value="@_Title"></Title>


<SfDialog IsModal="false" CloseOnEscape="false"
          Target="#content-body"
          CssClass="dialog-max-content"
          @bind-Visible="@Ventana_Principal_IsVisible">

    <DialogTemplates>
        <Content>

            <div class="col-12">
                <SfCard>
                    <div class="card mb-4">

                        <div class="card-header pb-0 d-flex justify-content-between">
                            <h6>@_Title</h6>

                            <div class="p-0">
                                <button @onclick="(async () => await LoadInformation())" class="btn btn-sm btn-outline-info" type="button" title="Reload information">
                                    <i class="fas fa-redo-alt"></i>
                                </button>
                            </div>

                        </div>

                        <CardContent>

                            <div class="card-body px-0 pt-0 pb-2">
                                <div class="table-responsive p-0">

                                    @if (_Loading)
                                    {
                                        <div class="mt-3">
                                            <_Loading />
                                        </div>
                                    }
                                    else
                                    {
                                        if (_GlobalElements.PermissionForSection.Read)
                                        {
                                            if (_Ready)
                                            {
                                                if (_GlobalElements.InformationOfData.ListOfData == null || _GlobalElements.InformationOfData.ListOfData.Count == 0)
                                                {
                                                    <div class="justify-content-md-center align-items-center">
                                                        <div class="alert-pers-info-min mb-2 text-center" role="alert">
                                                            <strong class="alert-text">Not found data.</strong>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="overflow-scroll">
                                                        <SfGrid DataSource="@_GlobalElements.InformationOfData.ListOfData"
                                                Toolbar="@(new List<string>() {"Search"})"
                                                ShowColumnChooser="false"
                                                AllowResizing="true"
                                                AllowSorting="true"
                                                AllowExcelExport="false"
                                                AllowPdfExport="false"
                                                AllowPaging="true"
                                                AllowReordering="false"
                                                Width="100%"
                                                Height="100%" @ref="_Grid">


                                                            <GridPageSettings PageCount="5" PageSizes="true"></GridPageSettings>

                                                            <GridEvents OnToolbarClick="ToolbarClick" TValue="Data_Request"></GridEvents>

                                                            <GridColumns>


                                                                <GridColumn Field=@nameof(Data_Request.ID)
                                                            HeaderText="ID"
                                                            Visible="false"
                                                            TextAlign="TextAlign.Center"
                                                            IsPrimaryKey="true" />

                                                                <GridColumn Field=@nameof(Data_Request.Datetime)
                                                            HeaderText="Date"
                                                            Format="d"
                                                            TextAlign="TextAlign.Center"
                                                            AutoFit="true">
                                                                    <Template>
                                                                        @{
                                                            var item = (context as Data_Request);
                                                            string date = item.Datetime.ToString("dd/MM/yyyy");
                                                            string time = item.Datetime.ToString("HH:mm") + "hs";
                                                            <span><strong>@date</strong>    @time</span>
                                                        }
                                                    </Template>
                                                </GridColumn>



                                                <GridColumn HeaderText="Equipment"
                                                            TextAlign="TextAlign.Center">
                                                    <Template>
                                                        @{
                                                            var item = (context as Data_Request);
                                                            <span title="ID: @item.IDequipment">@item.Equipment.Name</span>
                                                        }
                                                    </Template>
                                                </GridColumn>


                                                <GridColumn Field=@nameof(Data_Request.Info)
                                                            HeaderText="Data"
                                                            TextAlign="TextAlign.Left" />


                                                <GridColumn Field=@nameof(Data_Request.Count)
                                                            HeaderText="Count"
                                                            TextAlign="TextAlign.Center"
                                                            AutoFit="true" />

                                            </GridColumns>

                                            <GridTemplates>

                                                <EmptyRecordTemplate>
                                                    <div class="justify-content-md-center align-items-center">
                                                        <div class="alert-pers-info-min mb-2 text-center" role="alert">
                                                            <strong class="alert-text">Not found data.</strong>
                                                        </div>
                                                    </div>
                                                </EmptyRecordTemplate>

                                            </GridTemplates>

                                        </SfGrid>
                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <_FailedToLoad />
                                            }
                                        }
                                        else
                                        {
                                            <_SinPermisos />
                                        }
                                    }

                                </div>
                            </div>

                        </CardContent>
                    </div>


                </SfCard>
            </div>
        </Content>
    </DialogTemplates>

    <DialogAnimationSettings Effect="@_GlobalConfiguration.AnimationEffect" Duration=@_GlobalConfiguration.AnimationTime />
    <DialogPositionData X="center" Y="start"></DialogPositionData>
</SfDialog>


@code {
    #region Variables
    private NumberFormatInfo nfi = new NumberFormatInfo { NumberDecimalSeparator = ",", NumberGroupSeparator = "." };

    private bool _Loading { get; set; } = true;
    private bool _Ready { get; set; } = true;
    private string _Title { get; set; } = "Stations";

    private SfGrid<Data_Request> _Grid = new();
    #endregion

    #region Mostrar informacion

    protected override async Task OnInitializedAsync()
    {
        Ventana_Principal_IsVisible = true;

        _GlobalElements.PermissionForSection = await _LocalStorage.GetPermissionForSection(SystemSectionsEnum.Data);
        if (_GlobalElements.PermissionForSection.Read)
        {
            await LoadInformation();

            try { await StartHub(); }
            catch (Exception) { }
        }
    }

    public async Task StartHub()
    {
        _HubConnection.On("DataReceived", async (object data) =>
        {
            try
            {
                var response = JsonConvert.DeserializeObject<GlobalResponse_Request>(data.ToString());
                UpdateView(response.InformationOfData);
            }
            catch (Exception e)
            {

            }
        });

        await _HubConnection.StartAsync();
    }

    public async Task LoadInformation()
    {
        try
        {
            _Ready = false;
            _Loading = true;
            StateHasChanged();

            var statusResponse = await HttpClass.GetSet(Http, URLs.Data, _Toast, _GlobalElements, _GlobalElements.InformationOfData.Filters);
            if (statusResponse)
            {
                _Ready = true;
                UpdateView(_GlobalElements.InformationOfData);
            }
        }
        catch (Exception e)
        {
            _GlobalConfiguration.NuevoLog("The information could not be loaded from data", SystemActionsEnum.LoadInformation, e, SystemErrorCodesEnum.Error);
            _Toast.ShowError("The information could not be loaded.");
        }
        finally
        {
            _Loading = false;
            StateHasChanged();
        }
    }

    public void UpdateView(InformationOfData_Request informacion)
    {
        try
        {
            _Loading = true;
            StateHasChanged();

            _GlobalElements.InformationOfData.ListOfData = informacion.ListOfData;
            //_ResumenCVIG_childComponent.ActualizarVista(informacion);

            _Loading = false;
            StateHasChanged();

            _Grid.Refresh();
        }
        catch (Exception) { }
    }

    #endregion


    #region Grilla

    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (_GlobalElements.PermissionForSection.Export)
        {
            if (args.Item.Id.Contains("pdfexport"))
                this._Grid.PdfExport();

            else if (args.Item.Id.Contains("excelexport"))
                this._Grid.ExcelExport();

            else if (args.Item.Id.Contains("csvexport"))
                this._Grid.CsvExport();
        }
        else
        {
            _Toast.ShowWarning("No tiene permiso para exportar.");
        }
    }

    #endregion Grilla


    #region Modales y ventanas

    private bool Ventana_Principal_IsVisible { get; set; } = true;

    public void MostrarVentana_Principal()
    {
        Ventana_Principal_IsVisible = true;
        StateHasChanged();
    }

    #endregion

}
