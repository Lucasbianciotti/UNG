@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection _HubConnection

@inject HttpClient Http
@inject IAuthentication_Services _AuthenticationService
@inject IGlobalElements_Services _GlobalElements
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject IToast_Services _Toast

@attribute [Authorize]

<Title Value="@_Title"></Title>

<div class="row">
</div>


@code {
    private string _Title { get; set; } = "Dashboard";

    //    protected override void OnInitialized()
    //    {
    //        // launch the signalR connection in the background.
    //#pragma warning disable CS4014
    //        ConnectWithRetryAsync(cts.Token);

    //        // Once initialized the retry logic configured in the HubConnection will automatically attempt to reconnect
    //        // However, once it reaches its maximum number of attempts, it will give up and needs to be manually started again
    //        // handling this event we can manually attempt to reconnect
    //        _HubConnection.Closed += error =>
    //        {
    //            return ConnectWithRetryAsync(cts.Token);
    //        };
    //    }

    //    private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
    //    {
    //        // Keep trying to until we can start or the token is canceled.
    //        while (true)
    //        {
    //            try
    //            {
    //                await _HubConnection.StartAsync(token);
    //                return true;
    //            }
    //            catch when (token.IsCancellationRequested)
    //            {
    //                return false;
    //            }
    //            catch
    //            {
    //                // Try again in a few seconds. This could be an incremental interval
    //                await Task.Delay(5000);
    //            }
    //        }
    //    }

    //    public async ValueTask DisposeAsync()
    //    {
    //        cts.Cancel();
    //        cts.Dispose();
    //        await _HubConnection.DisposeAsync();
    //    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await _HubConnection.StartAsync();

    //    _HubConnection.On<string, string>("ReceiveMessage", (user, message) =>
    //    {
    //        var encodedMsg = $"{user}: {message}";
    //        messages.Add(encodedMsg);
    //        StateHasChanged();
    //    });

    //    await _HubConnection.StartAsync();
    //}


    //#region Variables
    //public FilterDashboard_Request _Filters = new();

    //public NumberFormatInfo nfi = new NumberFormatInfo { NumberDecimalSeparator = ",", NumberGroupSeparator = "." };

    //private bool _Loading { get; set; } = true;
    //private bool _Ready { get; set; } = true;
    //private bool _RenderizadoCompleto { get; set; }

    //public String[] _ColoresGraficoPeriodo = new String[] { "#5ed84f", "#fdb901", "#28afd0", "#fa626b" };
    //public String[] _ColoresGraficoAnual = new String[] { "#5ed84f", "#fa626b" };

    //Dashboard_Request _Model { get; set; } = new Dashboard_Request();
    //SfChart Grafico_CVIG = new SfChart();

    //private bool _GlobalElements.PermissionForSection.Read { get; set; } = true;

        //#endregion



    //#region Mostrar informacion

    //protected override async Task OnInitializedAsync()
    //{
    //    if (_GlobalElements.User != null)
    //    {
    //        _GlobalElements.PermissionForSection.Read = UsersClass.UserTienePermiso(_GlobalElements.User, SystemSectionsEnum.Dashboard, SystemActionsEnum.Read);

    //        if (_GlobalElements.PermissionForSection.Read)
    //            await CargarInformacion();
    //    }
    //}

    //public async Task CargarInformacion()
    //{
    //    try
    //    {
    //        _RenderizadoCompleto = false;
    //        _Ready = false;
    //        _Loading = true;
    //        StateHasChanged();

    //        var response = await HttpClass.Get_Dashboard(Http, _Filters, _Toast, _GlobalElements);
    //        if (response != null)
    //        {
    //            _Model = response;

    //            RenderizarGraficos();
    //            _Ready = true;
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        _GlobalConfiguration.NuevoLog("No se pudo cargar la información del Dashboard", SystemActionsEnum.LoadInformation, e, SystemErrorCodesEnum.Error);
    //        _Toast.ShowError("The information could not be loaded.");
    //    }
    //    finally
    //    {
    //        _Loading = false;
    //        StateHasChanged();
    //    }
    //}

    //#endregion


    //#region Metodos
    //private void RenderizarGraficos()
    //{
    //    _RenderizadoCompleto = true;
    //}

    //public void ResizeStop(Syncfusion.Blazor.Layouts.ResizeArgs args)//cuando termino de cambiar el tamaño de la ventana
    //{
    //    RenderizarGraficos();
    //}

    //public void Resizing(Syncfusion.Blazor.Layouts.ResizeArgs args)//mientras se va cambiando el tamaño
    //{

    //}

    //void ChartLoaded(LoadedEventArgs Args)
    //{

    //}
    //#endregion Metodos
}