@inject HttpClient Http
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject IGlobalElements_Services _GlobalElements
@inject IToast_Services _Toast

@attribute [Authorize]


<SfDialog IsModal="false" CloseOnEscape="false"
          Target="#content-body"
          CssClass="dialog-max-content"
          @bind-Visible="@_Card_IsVisible">

    <DialogTemplates>
        <Content>

            <div class="col-12">
                <SfCard>

                    <div class="card-header pb-0 d-flex justify-content-between">
                        <h6>@_Title</h6>

                        <div class="p-0">
                            <button @onclick="Close" class="btn btn-sm btn-outline-info mr-1" type="button" title="Back">
                                <i class="fa-solid fa-arrow-left"></i>
                            </button>
                        </div>

                    </div>


                    <CardContent>

                        <div class="card-body px-0 pt-0 pb-2">

                            <EditForm Model="@_Model" OnInvalidSubmit="(() => StateHasChanged())">
                                <DataAnnotationsValidator />

                                <div class="row m-1">

                                    <div class="card-form-items col-12">
                                        <div class="card-header-min">
                                            <label>Station</label>
                                        </div>

                                        <div class="row card-body-min">
                                            <div class="col-md-6 col-sm-12">
                                                <label>Name<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <InputText class="form-control"
                                                               placeholder="ID"
                                                               aria-label="ID"
                                                               @bind-Value="_Model.Name" />
                                                    <ValidationMessage For="@(() => _Model.Name)" />
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-12">
                                                <label>Location<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <InputText class="form-control"
                                                               placeholder="Location"
                                                               aria-label="Location"
                                                               @bind-Value="_Model.Location" />
                                                    <ValidationMessage For="@(() => _Model.Location)" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="card-form-items col-12">
                                        <div class="card-header-min">
                                            <label>Private network</label>
                                        </div>

                                        <div class="row card-body-min">
                                            <div class="col-md-5 col-sm-12">
                                                <label>SSID<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <InputText type="text"
                                                               class="form-control"
                                                               aria-label="SSID"
                                                               placeholder="SSID"
                                                               @bind-Value="_Model.SSID_Int" />
                                                    <ValidationMessage For="@(() => _Model.SSID_Int)" />
                                                </div>
                                            </div>

                                            <div class="col-md-5 col-sm-12">
                                                <label>Password<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <InputText type="password"
                                                               class="form-control"
                                                               aria-label="Password"
                                                               placeholder="Password"
                                                               @bind-Value="_Model.PASS_Int" />
                                                    <ValidationMessage For="@(() => _Model.PASS_Int)" />
                                                </div>
                                            </div>

                                            <div class="col-md-2 col-sm-12">
                                                <label>Security Type<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <SfDropDownList TValue="int?"
                                                                    TItem="xEditableItem"
                                                                    PopupHeight="auto"
                                                                    Placeholder="Select type"
                                                                    @bind-Value="@_Model.PASS_Int_SecurityType"
                                                                    AllowFiltering="true" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                                    DataSource="@SecurityWIFITypesEnum.ListEditableItem_Types()">
                                                        <DropDownListTemplates TItem="xEditableItem">
                                                            <NoRecordsTemplate>
                                                                <span class='norecord'> Not found types</span>
                                                            </NoRecordsTemplate>
                                                        </DropDownListTemplates>
                                                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                                    </SfDropDownList>
                                                    <ValidationMessage For="@(() => _Model.PASS_Int_SecurityType)" />
                                                </div>
                                            </div>

                                            <div class="col-auto">
                                                <label>IP<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <SfMaskedTextBox type="text"
                                                                     class="form-control"
                                                                     aria-label="IP"
                                                                     placeholder="IP"
                                                                     @bind-Value="_Model.IP_Private"
                                                                     Mask="000.000.000.000" />
                                                    <ValidationMessage For="@(() => _Model.IP_Private)" />
                                                </div>
                                            </div>

                                            <div class="col-auto">
                                                <label>Port<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <SfNumericTextBox type="text"
                                                                      class="form-control"
                                                                      aria-label="Port"
                                                                      placeholder="Port"
                                                                      Min="1"
                                                                      Decimals="0"
                                                                      Step="1"
                                                                      ShowSpinButton="false"
                                                                      @bind-Value="_Model.Port" />
                                                    <ValidationMessage For="@(() => _Model.Port)" />
                                                </div>
                                            </div>

                                            <div class="col-auto">
                                                <label>Host<label class="text-danger">*</label></label>
                                                <div class="mb-2">
                                                    <InputText type="text"
                                                               class="form-control"
                                                               aria-label="Host"
                                                               placeholder="Host"
                                                               @bind-Value="_Model.Host" />
                                                    <ValidationMessage For="@(() => _Model.Host)" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="mt-4 col-12 text-center">
                                    @if (_Loading)
                                    {
                                        <_LoadingButton />
                                    }
                                    else
                                    {
                                        <button @onclick="Close" class="btn btn-sm btn-outline-info mr-1" type="button" title="Back">
                                            <i class="fa-solid fa-arrow-left"></i>
                                        </button>

                                        <button @onclick="Save" class="btn btn-sm btn-outline-success" type="submit" title="Save">
                                            <i class="fa-solid fa-floppy-disk"></i> Save
                                        </button>
                                    }
                                </div>

                            </EditForm>

                        </div>

                    </CardContent>

                </SfCard>
            </div>

        </Content>
    </DialogTemplates>

    <DialogAnimationSettings Effect="@_GlobalConfiguration.AnimationEffect" Duration=@_GlobalConfiguration.AnimationTime />
    <DialogPositionData X="center" Y="start"></DialogPositionData>
</SfDialog>


@code {

    [Parameter]
    public Stations _Page { get; set; }

    private Station_Request _Model { get; set; } = new();

    private bool _Loading { get; set; }
    private bool _Ready { get; set; } = true;
    private bool _Creating { get; set; }
    private NumberFormatInfo nfi = new NumberFormatInfo { NumberDecimalSeparator = ",", NumberGroupSeparator = "." };


    private bool _Card_IsVisible { get; set; } = false;
    private string _Title { get; set; }


    private async Task Save()
    {
        if (Validar())
        {
            if (_Creating)
            {
                try
                {
                    _Loading = true;
                    StateHasChanged();

                    var statusResponse = await HttpClass.PostSet(Http, URLs.Create_Station, _Model, _Toast, _GlobalElements);
                    if (statusResponse)
                        Close();
                }
                catch (Exception e)
                {
                    _GlobalConfiguration.NuevoLog("Could not create station", SystemActionsEnum.Create, e, SystemErrorCodesEnum.Error);
                    _Toast.ShowError("Could not create.");
                }
                finally
                {
                    _Loading = false;
                    StateHasChanged();
                }
            }
            else
            {
                try
                {
                    _Loading = true;
                    StateHasChanged();

                    var statusResponse = await HttpClass.PostSet(Http, URLs.Modify_Station, _Model, _Toast, _GlobalElements);
                    if (statusResponse)
                        Close();
                }
                catch (Exception e)
                {
                    _GlobalConfiguration.NuevoLog("Could not modify station", SystemActionsEnum.Modify, e, SystemErrorCodesEnum.Error);
                    _Toast.ShowError("Could not modify.");
                }
                finally
                {
                    _Loading = false;
                    StateHasChanged();
                }
            }
        }
    }


    #region Metodos
    private bool Validar()
    {
        if (string.IsNullOrEmpty(_Model.Name)) return false;

        if (string.IsNullOrEmpty(_Model.Location)) return false;

        if (string.IsNullOrEmpty(_Model.SSID_Int)) return false;

        if (string.IsNullOrEmpty(_Model.PASS_Int)) return false;

        if (_Model.PASS_Int_SecurityType == null) return false;

        if (string.IsNullOrEmpty(_Model.IP_Private)) return false;

        //if (!string.IsNullOrEmpty(_Model.IP_Private) && _Model.IP_Private.Length != 9) { _Toast.ShowWarning("The IP has invalid length."); return false; }

        if (_Model.Port <= 0) return false;

        return true;
    }
    #endregion Metodos



    #region Abrir Cerrar

    public void OpenWindow_CreateStation()
    {
        if (_GlobalElements.PermissionForSection.Create)
        {
            _Page.Ventana_Principal_IsVisible = false;

            _Model = new();

            if (_GlobalElements.User.IDclient != null)
                _Model.IDclient = _GlobalElements.User.IDclient.Value;

            _Model.IDstatus = StationStatusEnum.Enabled;
            _Model.Filters = _GlobalElements.InformationOfStations.Filters;

            _Creating = true;
            _Card_IsVisible = true;
            _Title = "Add station";
            StateHasChanged();
        }
        else
        {
            _Toast.ShowWarning("Not found permissions.");
        }
    }

    public void OpenWindow_ModifyStation(Station_Request model)
    {
        if (_GlobalElements.PermissionForSection.Modify)
        {
            _Page.Ventana_Principal_IsVisible = false;

            _Model = model;

            _Creating = false;
            _Card_IsVisible = true;
            _Title = "Modify station";
            StateHasChanged();
        }
        else
        {
            _Toast.ShowWarning("Not found permissions.");
        }
    }

    private void Close()
    {
        _Card_IsVisible = false;
        _Page.Ventana_Principal_IsVisible = true;
        StateHasChanged();
        _Page.UpdateView();
    }

    #endregion
}
