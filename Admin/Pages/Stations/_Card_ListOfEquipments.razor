@inject HttpClient Http
@inject IGlobalConfiguration_Services _GlobalConfiguration
@inject IGlobalElements_Services _GlobalElements
@inject IToast_Services _Toast

@attribute [Authorize]


<SfDialog IsModal="false" CloseOnEscape="false"
          Target="#content-body"
          CssClass="dialog-max-content"
          @bind-Visible="@_Card_IsVisible">

    <DialogTemplates>
        <Content>

            <div class="col-12">
                <SfCard>

                    <div class="card-header pb-0 d-flex justify-content-between">
                        <h6>@_Title</h6>

                        <div class="p-0">
                            <button @onclick="(async () => Close())" class="btn btn-sm btn-outline-info mr-1" type="button" title="Close">
                                <i class="fa-solid fa-arrow-left"></i>
                            </button>

                            <button @onclick="(async () => await LoadInformation())" class="btn btn-sm btn-outline-info mr-1" type="button" title="Reload information">
                                <i class="fas fa-redo-alt"></i>
                            </button>

                            <button @onclick="(()=>_Page._Card_EditionEquipment.OpenWindow_AddEquipment(_Model, false))" class="btn btn-sm btn-outline-success" type="button" title="Add station">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                        </div>

                    </div>


                    <CardContent>

                        <div class="card-body px-0 pt-0 pb-2">
                            <div class="table-responsive p-0">

                                @if (_Loading)
                                {
                                    <div class="mt-3">
                                        <_Loading />
                                    </div>
                                }
                                else
                                {
                                    if (_GlobalElements.PermissionForSection.Read)
                                    {
                                        if (_Ready)
                                        {
                                            if (_Model.ListOfEquipments == null || _Model.ListOfEquipments.Count == 0)
                                            {
                                                <div class="justify-content-md-center align-items-center">
                                                    <div class="alert-pers-info-min mb-2 text-center" role="alert">
                                                        <strong class="alert-text">Not found stations.</strong>
                                                        @if (_GlobalElements.PermissionForSection.Read && _GlobalElements.PermissionForSection.Read)
                                                        {
                                                            <p class="alert-text">Add station, click <a class="text-primary" @onclick="@(() => _Page._Card_EditionEquipment.OpenWindow_AddEquipment(_Model,false))">here</a></p>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="overflow-scroll">
                                                    <SfGrid DataSource="@_Model.ListOfEquipments"
                                            Toolbar="@(new List<string>() {"Search"})"
                                            ShowColumnChooser="false"
                                            AllowResizing="true"
                                            AllowSorting="true"
                                            AllowExcelExport="false"
                                            AllowPdfExport="false"
                                            AllowPaging="true"
                                            AllowReordering="false"
                                            Width="100%"
                                            Height="100%" @ref="_Grid">


                                                        <GridPageSettings PageCount="5" PageSizes="true" />

                                                        <GridColumns>

                                                            <GridColumn HeaderText="Actions"
                                                        TextAlign="TextAlign.Center"
                                                        Width="120">
                                                                <Template>
                                                                    @{
                                                        var data = (context as Equipment_Request);
                                                        @if (_GlobalElements.PermissionForSection.Read && _GlobalElements.PermissionForSection.Modify)
                                                        {
                                                            <button @onclick="(() => OnCommandClicked(data, CommandButtonType.Edit))" type="button" class="e-btn e-icon-btn btn btn-outline-info btn-min" title="Edit station" style="margin: 5px !important">
                                                                <i class="fa-solid fa-pen-to-square"></i>
                                                            </button>
                                                        }

                                                        //@if (_GlobalElements.PermissionForSection.Read && _GlobalElements.User.PermissionForDelete)
                                                        //{
                                                        //    <button @onclick="(() => OnCommandClicked(data, CommandButtonType.Delete))" type="button" class="e-control e-btn e-lib btn btn-outline-danger btn-min e-edit-delete e-Deletebutton e-icon-btn" style="margin-right: 5px !important"><i class="e-icons e-delete e-btn-icon"></i></button>
                                                        //}
                                                    }
                                                </Template>
                                            </GridColumn>

                                            <GridColumn Field=@nameof(Equipment_Request.ID)
                                                        HeaderText="ID"
                                                        Visible="false"
                                                        TextAlign="TextAlign.Center"
                                                        IsPrimaryKey="true" />

                                            <GridColumn Field=@nameof(Equipment_Request.Name)
                                                        HeaderText="Name"
                                                        TextAlign="TextAlign.Center" />

                                            <GridColumn Field=@nameof(Equipment_Request.Type)
                                                        HeaderText="Type"
                                                        TextAlign="TextAlign.Center">
                                                <Template>
                                                    @{
                                                        var data = (context as Equipment_Request);
                                                        <span>@EquipmentsTypesEnum.GetType(data.Type)</span>
                                                    }
                                                </Template>
                                            </GridColumn>

                                            <GridColumn Field=@nameof(Equipment_Request.IDstatus)
                                                        HeaderText="Status"
                                                        TextAlign="TextAlign.Center">
                                                <Template>
                                                    @{
                                                        var data = (context as Equipment_Request);
                                                        if (data.IDstatus == EquipmentStatusEnum.Enabled)
                                                        {
                                                            <SfButton Content="@data.IDstatus" CssClass="e-outline e-success btn-rounded" />
                                                        }
                                                        else
                                                        {
                                                            <SfButton Content="@data.IDstatus" CssClass="e-outline e-warning btn-rounded" />
                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>

                                            <GridColumn HeaderText="QR code"
                                                        TextAlign="TextAlign.Center">
                                                <Template>
                                                    @{
                                                        var data = (context as Equipment_Request);
                                                        <button @onclick="(() => ViewQR(data))" type="button" class="e-btn e-icon-btn btn btn-outline-primary btn-min" title="View QR code" style="margin: 5px !important">
                                                            <i class="fa-solid fa-qrcode"></i>
                                                        </button>
                                                    }
                                                </Template>
                                            </GridColumn>

                                        </GridColumns>

                                        <GridTemplates>

                                            <EmptyRecordTemplate>
                                                <div class="justify-content-md-center align-items-center">
                                                    <div class="alert-pers-info-min mb-2 text-center" role="alert">
                                                        <strong class="alert-text">Not found stations.</strong>
                                                        @if (_GlobalElements.PermissionForSection.Read && _GlobalElements.PermissionForSection.Create)
                                                        {
                                                            <p class="alert-text">Add station, click <a class="text-primary" @onclick="@(() => _Page._Card_EditionEquipment.OpenWindow_AddEquipment(_Model,false))">here</a></p>
                                                        }
                                                    </div>
                                                </div>
                                            </EmptyRecordTemplate>

                                            @*<DetailTemplate>
                                                //    @{
                                                //        var model = (context as Station_Request);
                                                //    }

                                                //    <div class="col-10 card p-1 mt-1 mb-1 border-shadow">
                                                //        <div class="card-content">
                                                //        </div>
                                                //    </div>
                                                //</DetailTemplate>
                                                // *@
                                        </GridTemplates>

                                    </SfGrid>
                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <_FailedToLoad />
                                        }
                                    }
                                    else
                                    {
                                        <_SinPermisos />
                                    }
                                }

                            </div>
                        </div>

                    </CardContent>

                </SfCard>
            </div>

        </Content>
    </DialogTemplates>

    <DialogAnimationSettings Effect="@_GlobalConfiguration.AnimationEffect" Duration=@_GlobalConfiguration.AnimationTime />
    <DialogPositionData X="center" Y="start"></DialogPositionData>
</SfDialog>


<div class="modal @ModalClass modal-animation" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="row">
                    @{
                        if (_Modal_Model != null)
                        {
                            _Modal_Model.QRcode = QRCodeClass.GenerateCodeQR(_Model, _Modal_Model);


                            <div class="col-12" title="@_Modal_Model.QRcode">
                                <img src="@QRCodeClass.ConvertCodeQRToSRC(_Modal_Model.QRcode)" class="img-qr" />
                            </div>
                        }
                    }
                </div>
                <div class="text-center">
                    <button @onclick="CloseModal" class="btn btn-sm btn-outline-info mr-1" type="button" title="Close">
                        <i class="fa-solid fa-arrow-left"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public Stations _Page { get; set; }

    private Station_Request _Model { get; set; } = new();

    private bool _Loading { get; set; }
    private bool _Ready { get; set; } = true;

    public bool _Card_IsVisible { get; set; } = false;
    private bool _Modal_IsVisible { get; set; } = false;

    private Equipment_Request _Modal_Model { get; set; } = null;

    private string _Title { get; set; }

    private SfGrid<Equipment_Request> _Grid = new();


    #region Mostrar informacion

    public async Task LoadInformation()
    {
        try
        {
            _Ready = false;
            _Loading = true;
            StateHasChanged();

            var response = await HttpClass.GetOnly(Http, URLsAdmin.EquipmentsOfStation, _Toast, null, _Model.ID);
            if (response != null)
            {
                _Ready = true;
                UpdateView(response.ListOfEquipments);
            }
        }
        catch (Exception e)
        {
            _GlobalConfiguration.NuevoLog("The information could not be loaded from stations", SystemActionsEnum.LoadInformation, e, SystemErrorCodesEnum.Error);
            _Toast.ShowError("The information could not be loaded.");
        }
        finally
        {
            _Loading = false;
            StateHasChanged();
        }
    }

    public void UpdateView(List<Equipment_Request> lista)
    {
        try
        {
            _Loading = true;
            StateHasChanged();

            _Model.ListOfEquipments = lista;
            _GlobalElements.InformationOfStations.ListOfStations.Where(x => x.ID == _Model.ID).FirstOrDefault().ListOfEquipments = lista;
            //_ResumenCVIG_childComponent.ActualizarVista(informacion);

            _Loading = false;
            StateHasChanged();

            _Grid.Refresh();
        }
        catch (Exception) { }
    }

    #endregion


    #region Grilla

    public void OnCommandClicked(Equipment_Request args, CommandButtonType comando)
    {
        if (comando == CommandButtonType.Edit)
        {
            if (_GlobalElements.PermissionForSection.Modify)
                _Page._Card_EditionEquipment.OpenWindows_ModifyEquipment(_Model, args, false);
            else
                _Toast.ShowWarning("Not found permissions.");
        }
        //else if (comando == CommandButtonType.Delete)
        //{
        //    if (_GlobalElements.User.PermissionForDelete)
        //        AbrirModal_Delete(args);
        //    else
        //        _Toast.ShowWarning("No tiene permiso para eliminar.");
        //}
    }

    #endregion Grilla

    public void ViewQR(Equipment_Request model)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;

        _Modal_Model = model;

        _Modal_IsVisible = true;
        StateHasChanged();
    }

    #region Abrir Cerrar Modal
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    public void CloseModal()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    #endregion

    #region Abrir Cerrar

    public void OpenWindows_ViewEquipments(Station_Request station)
    {
        _Page.PrincipalCard_IsVisible = false;

        _Model = station;

        _Card_IsVisible = true;
        _Title = station.Name + "'s equipment";
        StateHasChanged();
    }

    private void Close()
    {
        _Card_IsVisible = false;
        _Page.PrincipalCard_IsVisible = true;
        StateHasChanged();
        _Page.UpdateView();
    }

    #endregion
}
